AWSTemplateFormatVersion: '2010-09-09'
Description: 'Generic template to create a Postgres RDS instance. The password is generated and saved as an SSM Parameter.'

Parameters:
  EnvironmentName:
    Type: String
    Default: cls
    Description: A name for the environment that this cloudformation will be
                 part of. Used to locate other resources in the same environment.

  ApplicationName:
    Type: String
    Default: worker-api
    Description: A name for the app that this cloudformation will be
                 part of. Used to locate other resources in the same app.

  DatabaseName:
    Description: The name of the database
    Type: String

  DBInstanceType:
    Description: The Type of RDS instance to use for running
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.t2.large
      - db.m4.large
      - db.r3.large
      - db.r3.2xlarge

  DBAllocatedStorage:
    Description: The storage size to be assigned to the DB Instance.
    Type: String
    Default: 10

  DBMasterUsername:
    Description: Master user for the db instance.
    Type: String
    NoEcho: true

  VPCId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Id of the vpc

  PrivateSubnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Id of the private subnet 1

  PrivateSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Id of the private subnet 2

  EKSSecurityGroupID:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The sg-id of the eks cluster
    Default: "NoValue"

Conditions:
    EnableEKSSGIngress: !Not [!Equals ["none", !Ref EKSSecurityGroupID]]

Resources:
  ##########################################################################
  #                                                                        #
  #                          Password generator                            #
  #                                                                        #
  ###########################################################################
  LambdaBasicExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  RandomPasswordGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import string, random
          import cfnresponse
          client = boto3.client('lambda')
          # Random password generator
          LENGTH = 13
          CHARS = string.ascii_letters + string.digits
          def generate_password(length, chars):
              rnd = random.SystemRandom()
              return ''.join(rnd.choice(chars) for i in range(length))
          def handler(event, context):
              print('Received request', event)
              properties = event['ResourceProperties']
              phyid = event.get('PhysicalResourceId', '%s/%s' % (event['StackId'], event['LogicalResourceId']))
              if event['RequestType'] in ('Create', 'Update'):
                  length = (int(properties['Length']) if 'Length' in properties else LENGTH)
                  password = generate_password(length, CHARS)
                  # Some changes made. Publish a new version
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Password': password
                  }, phyid)
              elif event['RequestType'] == 'Delete':
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, phyid)
      Handler: index.handler
      Role: !GetAtt LambdaBasicExecRole.Arn
      Runtime: python2.7
      MemorySize: 128
      Timeout: 20

  # Custom Resource
  GeneratePassword:
    DependsOn: RandomPasswordGeneratorLambdaFunction
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 40
      ServiceToken: !GetAtt RandomPasswordGeneratorLambdaFunction.Arn

  DBMasterUsernameSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${EnvironmentName}/${ApplicationName}/database/USERNAME"
      Type: "String"
      Value: !Ref DBMasterUsername
      Description: DB_USERNAME

  DBMasterPasswordSSMParameter:
    DependsOn: GeneratePassword
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${EnvironmentName}/${ApplicationName}/database/PASSWORD"
      Type: "String"
      Value: !GetAtt GeneratePassword.Password
      Description: DB_PASSWORD

  DBNameSSMParameter:
    DependsOn: GeneratePassword
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${EnvironmentName}/${ApplicationName}/database/DBNAME"
      Type: "String"
      Value: !Ref DatabaseName
      Description: DB_PASSWORD

  DBHostSSMParameter:
    DependsOn: PostgresDatabase
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${EnvironmentName}/${ApplicationName}/database/HOST"
      Type: "String"
      Value: !GetAtt PostgresDatabase.Endpoint.Address
      Description: DB_HOST

  DBPortSSMParameter:
    DependsOn: PostgresDatabase
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${EnvironmentName}/${ApplicationName}/database/PORT"
      Type: "String"
      Value: !GetAtt PostgresDatabase.Endpoint.Port
      Description: DB_PORT

  ##########################################################################
  #                                                                        #
  #                                 Database                               #
  #                                                                        #
  ##########################################################################
  DatabaseKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref VPCId

  EKSDBSecurityGroupIngress:
    Condition: EnableEKSSGIngress
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress for DB security group from EKS cluster
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EKSSecurityGroupID

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  PostgresDatabase:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: "Snapshot"
    Properties:
      DBName: !Ref DatabaseName
      KmsKeyId: !Ref DatabaseKey
      StorageEncrypted: true
      MultiAZ: false
      StorageType: gp2
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceType
      Engine: "postgres"
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !GetAtt DBMasterPasswordSSMParameter.Value
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId

Outputs:
  DatabaseName:
    Description: 'Database'
    Value: !Ref DatabaseName
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, !Ref ApplicationName, 'DatabaseName' ] ]
  DBHost:
    Description: 'DBHost'
    Value: !GetAtt PostgresDatabase.Endpoint.Address
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, !Ref ApplicationName, 'DBHost' ] ]
  DBSecurityGroup:
    Description: 'DBSecurityGroup'
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Join [ ':', [ !Ref EnvironmentName, !Ref ApplicationName, 'DBSecurityGroup' ] ]
